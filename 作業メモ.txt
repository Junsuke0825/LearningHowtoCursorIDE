やりたいことをリストで提示するので、実行してください。
ただし、１つ１つ私に確認してＯＫをもらってから、実行するようにしてください。
・フォルダ配下のファイルをgit に push したいです。
・backend と frontend のサーバを起動して、画面を表示できるようにしたいです。
・RestfulAPIが使われているかを確認したいです。
・簡易的なデータベースをbackendで使用できるようにしたいです。
　SQLが実行できるデータベースであれば、なんでも構いません。
・登録用の画面を作成し、新しい登録用APIを作成して、バックエンド側でデータベースにデータを登録できるようにしたいです。

リモートレポジトリは、下のディレクトリです。
https://github.com/Junsuke0825/LearningHowtoCursorIDE.git
README.md ファイルだけコミット済みです。
それ以外は、何もしていません。


git commit -m "TypeScript and Node.js のサンプルプロジェクトを追加"

pnpmがより高速なパッケージであることはわかりました。
説明の中で下の言葉がわからなかったので、もう少し詳しく教えてほしいです。
「モノレポ構成（backend + frontend）」
「pnpmのワークスペース機能」


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

APIエンドポイント一覧：

GET /hello - ヘルスチェック（認証不要）
POST /login - ユーザー認証（JSON形式）
GET /product-groups - 商品グループ一覧（認証必要）
GET /products/:pgId - 特定グループの商品一覧（認証必要）
GET /product/:pgId/:pId - 特定商品の詳細（認証必要）

RESTful APIの特徴：
✅ HTTPメソッドの適切な使用（GET, POST）
✅ リソースベースのURL設計（/products, /product-groups）
✅ ステータスコードの適切な使用（200, 404）
✅ JSON形式でのデータ交換
✅ JWT認証の実装
✅ CORS設定（フロントエンドからのアクセス許可）

認証情報：
ユーザー名: jartsa, パスワード: joo
ユーザー名: rane, パスワード: jee
ユーザー名: d, パスワード: d


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

mjsファイルって何？
フレームワークは何を使用していますか？
corsの設定は、何のために実施している？フロントサーバに設定すべき設定なのでしょうか？バックエンド側にも同様の設定は必要なのでしょうか。
serverless.ymlというファイルは、何をするためのファイルですか？


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

アーキテクチャの特徴
Backend:
	Express.js + ES Modules (.mjs)
	RESTful API設計
	JWT認証
	サーバーレス対応
Frontend:
	React + TypeScript
	Redux Toolkit（状態管理）
	Tailwind CSS（スタイリング）
	Vite（高速ビルド）
開発環境:
	モノレポ構成（pnpm workspace）
	ESLint + Prettier（コード品質）
	ホットリロード対応

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
  const decodedToken = jwt.verify(token, SECRET);  // 署名を検証
  const session = findSessionByToken(token);

cursorを使っています。下のメッセージが表示されました。無料で使い続けることはできないのでしょうか？

You've hit your usage limit
Get Cursor Pro for more Agents use, unlimited Tab, and more.

＝＝＝
ちょっと待って。もともと、何をやるのか話をして進めていたはずです。
何を今まで実施してきて、これから何をやろうとしているのかをまず、説明してください。


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
現在の状況
✅ 完了したタスク
タスク1: フォルダ配下のファイルをGitにpush ✅
タスク2: backend と frontend のサーバを起動して、画面を表示 ✅
タスク3: RESTful APIが使われているかを確認 ✅
�� 進行中のタスク
タスク4: 簡易的なデータベースをbackendで使用できるようにする
現在の状況
✅ 実装済み:
SQLiteデータベースの導入（sqlite3パッケージインストール済み）
データベース接続とテーブル作成スクリプト（database.mjs）
データベース対応のユーザー管理（users_db.mjs）
新しい登録用APIエンドポイントの追加
アプリケーション起動時のデータベース初期化
❌ 現在の問題:
domain_db.mjsファイルが削除されてしまった
サーバーが正常に起動していない
ポート6600の競合エラーが発生していた
次にやるべきこと
domain_db.mjsファイルを復元
サーバーを正常に起動
データベース機能をテスト
タスク5: 登録用の画面を作成
まず、削除されてしまったdomain_db.mjsファイルを復元しましょうか？それとも、現在のサーバーの状態を確認しますか？
